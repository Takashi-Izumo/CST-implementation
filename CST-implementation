import numpy as np
import matplotlib.pyplot as plt
from collections import Counter

def compute_probability_distribution(scores):
    """Compute P(i)=freq(i)/N for scores 0..max(scores)."""
    total = len(scores)
    max_score = max(scores)
    # Include missing scores with 0 frequency
    freq = Counter(scores)
    p = {i: freq.get(i, 0) / total for i in range(max_score + 1)}
    return p

def coarse_grain_distribution(p, threshold):
    """Group p by T and distribute probability uniformly."""
    scores = sorted(p.keys())
    fail_group = [s for s in scores if s < threshold]
    pass_group = [s for s in scores if s >= threshold]
    
    q = {}
    if fail_group:
        total_fail = sum(p[s] for s in fail_group)
        for s in fail_group:
            q[s] = total_fail / len(fail_group)
    if pass_group:
        total_pass = sum(p[s] for s in pass_group)
        for s in pass_group:
            q[s] = total_pass / len(pass_group)
    return q

def kl_divergence(p, q):
    """Compute D_KL(P||Q)=sum P(i)*log(P(i)/Q(i))."""
    dkl = 0
    for s in p:
        if p[s] > 0 and q.get(s, 0) > 0:
            dkl += p[s] * np.log(p[s] / q[s])
    return dkl

def analyze_thresholds(scores):
    """Compute P and for T compute Q and D_KL.
    Returns list of (T, D_KL)."""
    p = compute_probability_distribution(scores)
    max_score = max(scores)
    results = []
    # Iterate T from 0 to max_score+1
    for T in range(max_score + 2):
        q = coarse_grain_distribution(p, T)
        dkl = kl_divergence(p, q)
        results.append((T, dkl))
    return results

# Test data
test_scores = [5, 3, 3, 3, 10, 6, 2, 5, 4, 0]

# Compute and print KL divergence for each threshold T
results = analyze_thresholds(test_scores)
for T, dkl in results:
    print(f"T = {T:2d}  -->  D_KL(P||Q) = {dkl:.5f}")

# Find optimal threshold with minimal KL divergence
best_threshold, min_dkl = min(results, key=lambda x: x[1])
print(
    f"\nOptimal threshold T = {best_threshold}, "
    f"minimum KL divergence is approx. {min_dkl:.5f}"
)

# Plot the results (optional)
Ts, dkl_vals = zip(*results)
plt.figure(figsize=(8, 5))
plt.plot(Ts, dkl_vals, marker='o', linestyle='-')
plt.xlabel('Pass/Fail Threshold (T)')
plt.ylabel('KL Divergence D_KL(P||Q)')
plt.title('KL Divergence for Each Threshold')
plt.grid(True)
plt.show()
